#include <Vcl.Imaging.pngimage.hpp>
#pragma hdrstop

#include "Unit1.h"
#include "Card.h"
#include "Deck.h"
#include "Deck.cpp"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}

String _fastcall TForm1::filePath(Card card)
{
	string symbol=card.getSymbol();
	string suit=card.getSuit();
	return  System::String((symbol + "_of_" + suit + ".png").c_str());
}

void __fastcall TForm1::PanelStartClick(TObject *Sender)
{

//	String suita=getSuit();
	PanelStand->Visible = true;
	PanelHit->Visible = true;
	PanelStart->Visible=false;
	deck.giveCardP();

	deck.giveCardD();
	deck.giveCardP();
	deck.giveCardD();

	Pcarte1->Picture->LoadFromFile(filePath(deck.giveHandP()[0]));

//	Dcarte1->Picture->LoadFromFile(filePath);
//	Pcarte2->Picture->LoadFromFile(filePath);
//	Dcarte2->Picture->LoadFromFile(filePath);


}
//---------------------------------------------------------------------------
void __fastcall TForm1::PanelHitClick(TObject *Sender)
{
	 deck.giveCardP(); // Assuming deck is an instance of your Deck class


   }

void __fastcall TForm1::PanelStandClick(TObject *Sender)
{

	while(deck.ScoreD()<16){
	 deck.giveCardD();
	}

	if(deck.ScoreP()>deck.ScoreD())
	{
		ShowMessage("Player's Score: "+ IntToStr(deck.ScoreP())+ " - Dealer's Score: " +IntToStr(deck.ScoreD())+ " -> Player Wins!");
	}
	if(deck.ScoreP()<deck.ScoreD())
	{
		ShowMessage("Player's Score: "+ IntToStr(deck.ScoreP())+ " - Dealer's Score: " +IntToStr(deck.ScoreD())+ " -> Dealer Wins!");
	}
	if(deck.ScoreP()==deck.ScoreD())
	{
		ShowMessage("Player's Score: "+ IntToStr(deck.ScoreP())+ " - Dealer's Score: " +IntToStr(deck.ScoreD())+ " -> Draw");
	}



}
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

